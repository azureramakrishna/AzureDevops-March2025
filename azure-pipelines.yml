# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger: none

pool:
  vmImage: ubuntu-latest

steps:
- task: CopyFiles@2
  inputs:
    SourceFolder: 'Terraform/for_each'
    Contents: '**.tf'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: DownloadBuildArtifacts@1
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'drop'
    downloadPath: '$(System.DefaultWorkingDirectory)'

- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/drop'
    backendServiceArm: 'Azure-service-connection'
    backendAzureRmResourceGroupName: 'storage-resource-group'
    backendAzureRmStorageAccountName: 'saanvikit'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'foreach.terraform.tfstate'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/drop'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/drop'
    environmentServiceNameAzureRM: 'Azure-service-connection'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/drop'
    commandOptions: '-auto-approve'
    environmentServiceNameAzureRM: 'Azure-service-connection'